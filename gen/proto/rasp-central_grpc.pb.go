// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.32.0--rc2
// source: proto/rasp-central.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RASPCentralClient is the client API for RASPCentral service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RASPCentralClient interface {
	RegAgent(ctx context.Context, in *RegAgentRequest, opts ...grpc.CallOption) (*RegAgentResponse, error)
	DeactivateAgent(ctx context.Context, in *DeactivateAgentRequest, opts ...grpc.CallOption) (*DeactivateAgentResponse, error)
	GetUpdatesSSRF(ctx context.Context, in *GetUpdatesSSRFRequest, opts ...grpc.CallOption) (RASPCentral_GetUpdatesSSRFClient, error)
}

type rASPCentralClient struct {
	cc grpc.ClientConnInterface
}

func NewRASPCentralClient(cc grpc.ClientConnInterface) RASPCentralClient {
	return &rASPCentralClient{cc}
}

func (c *rASPCentralClient) RegAgent(ctx context.Context, in *RegAgentRequest, opts ...grpc.CallOption) (*RegAgentResponse, error) {
	out := new(RegAgentResponse)
	err := c.cc.Invoke(ctx, "/RASPCentral/RegAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rASPCentralClient) DeactivateAgent(ctx context.Context, in *DeactivateAgentRequest, opts ...grpc.CallOption) (*DeactivateAgentResponse, error) {
	out := new(DeactivateAgentResponse)
	err := c.cc.Invoke(ctx, "/RASPCentral/DeactivateAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rASPCentralClient) GetUpdatesSSRF(ctx context.Context, in *GetUpdatesSSRFRequest, opts ...grpc.CallOption) (RASPCentral_GetUpdatesSSRFClient, error) {
	stream, err := c.cc.NewStream(ctx, &RASPCentral_ServiceDesc.Streams[0], "/RASPCentral/GetUpdatesSSRF", opts...)
	if err != nil {
		return nil, err
	}
	x := &rASPCentralGetUpdatesSSRFClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RASPCentral_GetUpdatesSSRFClient interface {
	Recv() (*GetUpdatesSSRFResponse, error)
	grpc.ClientStream
}

type rASPCentralGetUpdatesSSRFClient struct {
	grpc.ClientStream
}

func (x *rASPCentralGetUpdatesSSRFClient) Recv() (*GetUpdatesSSRFResponse, error) {
	m := new(GetUpdatesSSRFResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RASPCentralServer is the server API for RASPCentral service.
// All implementations must embed UnimplementedRASPCentralServer
// for forward compatibility
type RASPCentralServer interface {
	RegAgent(context.Context, *RegAgentRequest) (*RegAgentResponse, error)
	DeactivateAgent(context.Context, *DeactivateAgentRequest) (*DeactivateAgentResponse, error)
	GetUpdatesSSRF(*GetUpdatesSSRFRequest, RASPCentral_GetUpdatesSSRFServer) error
	mustEmbedUnimplementedRASPCentralServer()
}

// UnimplementedRASPCentralServer must be embedded to have forward compatible implementations.
type UnimplementedRASPCentralServer struct {
}

func (UnimplementedRASPCentralServer) RegAgent(context.Context, *RegAgentRequest) (*RegAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegAgent not implemented")
}
func (UnimplementedRASPCentralServer) DeactivateAgent(context.Context, *DeactivateAgentRequest) (*DeactivateAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateAgent not implemented")
}
func (UnimplementedRASPCentralServer) GetUpdatesSSRF(*GetUpdatesSSRFRequest, RASPCentral_GetUpdatesSSRFServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUpdatesSSRF not implemented")
}
func (UnimplementedRASPCentralServer) mustEmbedUnimplementedRASPCentralServer() {}

// UnsafeRASPCentralServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RASPCentralServer will
// result in compilation errors.
type UnsafeRASPCentralServer interface {
	mustEmbedUnimplementedRASPCentralServer()
}

func RegisterRASPCentralServer(s grpc.ServiceRegistrar, srv RASPCentralServer) {
	s.RegisterService(&RASPCentral_ServiceDesc, srv)
}

func _RASPCentral_RegAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RASPCentralServer).RegAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RASPCentral/RegAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RASPCentralServer).RegAgent(ctx, req.(*RegAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RASPCentral_DeactivateAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RASPCentralServer).DeactivateAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RASPCentral/DeactivateAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RASPCentralServer).DeactivateAgent(ctx, req.(*DeactivateAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RASPCentral_GetUpdatesSSRF_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetUpdatesSSRFRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RASPCentralServer).GetUpdatesSSRF(m, &rASPCentralGetUpdatesSSRFServer{stream})
}

type RASPCentral_GetUpdatesSSRFServer interface {
	Send(*GetUpdatesSSRFResponse) error
	grpc.ServerStream
}

type rASPCentralGetUpdatesSSRFServer struct {
	grpc.ServerStream
}

func (x *rASPCentralGetUpdatesSSRFServer) Send(m *GetUpdatesSSRFResponse) error {
	return x.ServerStream.SendMsg(m)
}

// RASPCentral_ServiceDesc is the grpc.ServiceDesc for RASPCentral service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RASPCentral_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RASPCentral",
	HandlerType: (*RASPCentralServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegAgent",
			Handler:    _RASPCentral_RegAgent_Handler,
		},
		{
			MethodName: "DeactivateAgent",
			Handler:    _RASPCentral_DeactivateAgent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUpdatesSSRF",
			Handler:       _RASPCentral_GetUpdatesSSRF_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/rasp-central.proto",
}
