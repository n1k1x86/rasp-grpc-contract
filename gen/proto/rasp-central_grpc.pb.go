// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.32.0--rc2
// source: proto/rasp-central.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RASPCentralClient is the client API for RASPCentral service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RASPCentralClient interface {
	RegSSRFAgent(ctx context.Context, in *RegSSRFAgentRequest, opts ...grpc.CallOption) (*RegSSRFAgentResponse, error)
	DeactivateSSRFAgent(ctx context.Context, in *DeactivateSSRFAgentRequest, opts ...grpc.CallOption) (*DeactivateSSRFAgentResponse, error)
}

type rASPCentralClient struct {
	cc grpc.ClientConnInterface
}

func NewRASPCentralClient(cc grpc.ClientConnInterface) RASPCentralClient {
	return &rASPCentralClient{cc}
}

func (c *rASPCentralClient) RegSSRFAgent(ctx context.Context, in *RegSSRFAgentRequest, opts ...grpc.CallOption) (*RegSSRFAgentResponse, error) {
	out := new(RegSSRFAgentResponse)
	err := c.cc.Invoke(ctx, "/RASPCentral/RegSSRFAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rASPCentralClient) DeactivateSSRFAgent(ctx context.Context, in *DeactivateSSRFAgentRequest, opts ...grpc.CallOption) (*DeactivateSSRFAgentResponse, error) {
	out := new(DeactivateSSRFAgentResponse)
	err := c.cc.Invoke(ctx, "/RASPCentral/DeactivateSSRFAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RASPCentralServer is the server API for RASPCentral service.
// All implementations must embed UnimplementedRASPCentralServer
// for forward compatibility
type RASPCentralServer interface {
	RegSSRFAgent(context.Context, *RegSSRFAgentRequest) (*RegSSRFAgentResponse, error)
	DeactivateSSRFAgent(context.Context, *DeactivateSSRFAgentRequest) (*DeactivateSSRFAgentResponse, error)
	mustEmbedUnimplementedRASPCentralServer()
}

// UnimplementedRASPCentralServer must be embedded to have forward compatible implementations.
type UnimplementedRASPCentralServer struct {
}

func (UnimplementedRASPCentralServer) RegSSRFAgent(context.Context, *RegSSRFAgentRequest) (*RegSSRFAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegSSRFAgent not implemented")
}
func (UnimplementedRASPCentralServer) DeactivateSSRFAgent(context.Context, *DeactivateSSRFAgentRequest) (*DeactivateSSRFAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateSSRFAgent not implemented")
}
func (UnimplementedRASPCentralServer) mustEmbedUnimplementedRASPCentralServer() {}

// UnsafeRASPCentralServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RASPCentralServer will
// result in compilation errors.
type UnsafeRASPCentralServer interface {
	mustEmbedUnimplementedRASPCentralServer()
}

func RegisterRASPCentralServer(s grpc.ServiceRegistrar, srv RASPCentralServer) {
	s.RegisterService(&RASPCentral_ServiceDesc, srv)
}

func _RASPCentral_RegSSRFAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegSSRFAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RASPCentralServer).RegSSRFAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RASPCentral/RegSSRFAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RASPCentralServer).RegSSRFAgent(ctx, req.(*RegSSRFAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RASPCentral_DeactivateSSRFAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateSSRFAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RASPCentralServer).DeactivateSSRFAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RASPCentral/DeactivateSSRFAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RASPCentralServer).DeactivateSSRFAgent(ctx, req.(*DeactivateSSRFAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RASPCentral_ServiceDesc is the grpc.ServiceDesc for RASPCentral service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RASPCentral_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RASPCentral",
	HandlerType: (*RASPCentralServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegSSRFAgent",
			Handler:    _RASPCentral_RegSSRFAgent_Handler,
		},
		{
			MethodName: "DeactivateSSRFAgent",
			Handler:    _RASPCentral_DeactivateSSRFAgent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rasp-central.proto",
}
