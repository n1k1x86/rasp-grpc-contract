// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/rasp-central.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RASPCentral_RegSSRFAgent_FullMethodName        = "/RASPCentral/RegSSRFAgent"
	RASPCentral_DeactivateSSRFAgent_FullMethodName = "/RASPCentral/DeactivateSSRFAgent"
	RASPCentral_CloseSSRFAgent_FullMethodName      = "/RASPCentral/CloseSSRFAgent"
	RASPCentral_SyncRules_FullMethodName           = "/RASPCentral/SyncRules"
)

// RASPCentralClient is the client API for RASPCentral service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RASPCentralClient interface {
	RegSSRFAgent(ctx context.Context, in *RegSSRFAgentRequest, opts ...grpc.CallOption) (*RegSSRFAgentResponse, error)
	DeactivateSSRFAgent(ctx context.Context, in *DeactivateSSRFAgentRequest, opts ...grpc.CallOption) (*DeactivateSSRFAgentResponse, error)
	CloseSSRFAgent(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*CloseSSRFAgentResponse, error)
	SyncRules(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NewRules], error)
}

type rASPCentralClient struct {
	cc grpc.ClientConnInterface
}

func NewRASPCentralClient(cc grpc.ClientConnInterface) RASPCentralClient {
	return &rASPCentralClient{cc}
}

func (c *rASPCentralClient) RegSSRFAgent(ctx context.Context, in *RegSSRFAgentRequest, opts ...grpc.CallOption) (*RegSSRFAgentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegSSRFAgentResponse)
	err := c.cc.Invoke(ctx, RASPCentral_RegSSRFAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rASPCentralClient) DeactivateSSRFAgent(ctx context.Context, in *DeactivateSSRFAgentRequest, opts ...grpc.CallOption) (*DeactivateSSRFAgentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeactivateSSRFAgentResponse)
	err := c.cc.Invoke(ctx, RASPCentral_DeactivateSSRFAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rASPCentralClient) CloseSSRFAgent(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*CloseSSRFAgentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloseSSRFAgentResponse)
	err := c.cc.Invoke(ctx, RASPCentral_CloseSSRFAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rASPCentralClient) SyncRules(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NewRules], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RASPCentral_ServiceDesc.Streams[0], RASPCentral_SyncRules_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AgentRequest, NewRules]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RASPCentral_SyncRulesClient = grpc.ServerStreamingClient[NewRules]

// RASPCentralServer is the server API for RASPCentral service.
// All implementations must embed UnimplementedRASPCentralServer
// for forward compatibility.
type RASPCentralServer interface {
	RegSSRFAgent(context.Context, *RegSSRFAgentRequest) (*RegSSRFAgentResponse, error)
	DeactivateSSRFAgent(context.Context, *DeactivateSSRFAgentRequest) (*DeactivateSSRFAgentResponse, error)
	CloseSSRFAgent(context.Context, *AgentRequest) (*CloseSSRFAgentResponse, error)
	SyncRules(*AgentRequest, grpc.ServerStreamingServer[NewRules]) error
	mustEmbedUnimplementedRASPCentralServer()
}

// UnimplementedRASPCentralServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRASPCentralServer struct{}

func (UnimplementedRASPCentralServer) RegSSRFAgent(context.Context, *RegSSRFAgentRequest) (*RegSSRFAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegSSRFAgent not implemented")
}
func (UnimplementedRASPCentralServer) DeactivateSSRFAgent(context.Context, *DeactivateSSRFAgentRequest) (*DeactivateSSRFAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateSSRFAgent not implemented")
}
func (UnimplementedRASPCentralServer) CloseSSRFAgent(context.Context, *AgentRequest) (*CloseSSRFAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseSSRFAgent not implemented")
}
func (UnimplementedRASPCentralServer) SyncRules(*AgentRequest, grpc.ServerStreamingServer[NewRules]) error {
	return status.Errorf(codes.Unimplemented, "method SyncRules not implemented")
}
func (UnimplementedRASPCentralServer) mustEmbedUnimplementedRASPCentralServer() {}
func (UnimplementedRASPCentralServer) testEmbeddedByValue()                     {}

// UnsafeRASPCentralServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RASPCentralServer will
// result in compilation errors.
type UnsafeRASPCentralServer interface {
	mustEmbedUnimplementedRASPCentralServer()
}

func RegisterRASPCentralServer(s grpc.ServiceRegistrar, srv RASPCentralServer) {
	// If the following call pancis, it indicates UnimplementedRASPCentralServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RASPCentral_ServiceDesc, srv)
}

func _RASPCentral_RegSSRFAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegSSRFAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RASPCentralServer).RegSSRFAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RASPCentral_RegSSRFAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RASPCentralServer).RegSSRFAgent(ctx, req.(*RegSSRFAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RASPCentral_DeactivateSSRFAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateSSRFAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RASPCentralServer).DeactivateSSRFAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RASPCentral_DeactivateSSRFAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RASPCentralServer).DeactivateSSRFAgent(ctx, req.(*DeactivateSSRFAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RASPCentral_CloseSSRFAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RASPCentralServer).CloseSSRFAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RASPCentral_CloseSSRFAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RASPCentralServer).CloseSSRFAgent(ctx, req.(*AgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RASPCentral_SyncRules_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AgentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RASPCentralServer).SyncRules(m, &grpc.GenericServerStream[AgentRequest, NewRules]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RASPCentral_SyncRulesServer = grpc.ServerStreamingServer[NewRules]

// RASPCentral_ServiceDesc is the grpc.ServiceDesc for RASPCentral service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RASPCentral_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RASPCentral",
	HandlerType: (*RASPCentralServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegSSRFAgent",
			Handler:    _RASPCentral_RegSSRFAgent_Handler,
		},
		{
			MethodName: "DeactivateSSRFAgent",
			Handler:    _RASPCentral_DeactivateSSRFAgent_Handler,
		},
		{
			MethodName: "CloseSSRFAgent",
			Handler:    _RASPCentral_CloseSSRFAgent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SyncRules",
			Handler:       _RASPCentral_SyncRules_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/rasp-central.proto",
}
